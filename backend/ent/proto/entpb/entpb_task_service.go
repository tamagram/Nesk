// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	empty "github.com/golang/protobuf/ptypes/empty"
	ent "github.com/tamagram/nesk/backend/ent"
	task "github.com/tamagram/nesk/backend/ent/task"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// TaskService implements TaskServiceServer
type TaskService struct {
	client *ent.Client
	UnimplementedTaskServiceServer
}

// NewTaskService returns a new TaskService
func NewTaskService(client *ent.Client) *TaskService {
	return &TaskService{
		client: client,
	}
}

// toProtoTask transforms the ent type to the pb type
func toProtoTask(e *ent.Task) (*Task, error) {
	v := &Task{}
	details := e.Details
	v.Details = details
	id := int32(e.ID)
	v.Id = id
	title := e.Title
	v.Title = title
	return v, nil
}

// Create implements TaskServiceServer.Create
func (svc *TaskService) Create(ctx context.Context, req *CreateTaskRequest) (*Task, error) {
	task := req.GetTask()
	m := svc.client.Task.Create()
	taskDetails := task.GetDetails()
	m.SetDetails(taskDetails)
	taskTitle := task.GetTitle()
	m.SetTitle(taskTitle)
	res, err := m.Save(ctx)

	switch {
	case err == nil:
		proto, err := toProtoTask(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal: %s", err)
	}
}

// Get implements TaskServiceServer.Get
func (svc *TaskService) Get(ctx context.Context, req *GetTaskRequest) (*Task, error) {
	var (
		err error
		get *ent.Task
	)
	id := int(req.GetId())
	switch req.GetView() {
	case GetTaskRequest_VIEW_UNSPECIFIED, GetTaskRequest_BASIC:
		get, err = svc.client.Task.Get(ctx, id)
	case GetTaskRequest_WITH_EDGE_IDS:
		get, err = svc.client.Task.Query().
			Where(task.ID(id)).
			Only(ctx)
	default:
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoTask(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}
}

// Update implements TaskServiceServer.Update
func (svc *TaskService) Update(ctx context.Context, req *UpdateTaskRequest) (*Task, error) {
	task := req.GetTask()
	taskID := int(task.GetId())
	m := svc.client.Task.UpdateOneID(taskID)
	taskDetails := task.GetDetails()
	m.SetDetails(taskDetails)
	taskTitle := task.GetTitle()
	m.SetTitle(taskTitle)
	res, err := m.Save(ctx)

	switch {
	case err == nil:
		proto, err := toProtoTask(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal: %s", err)
	}
}

// Delete implements TaskServiceServer.Delete
func (svc *TaskService) Delete(ctx context.Context, req *DeleteTaskRequest) (*empty.Empty, error) {
	var err error
	id := int(req.GetId())
	err = svc.client.Task.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}
}
